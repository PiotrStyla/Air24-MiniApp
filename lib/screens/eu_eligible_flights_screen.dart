import 'package:flutter/material.dart';
import '../core/app_localizations_patch.dart'; // Import for safe l10n extension
import '../services/aviation_stack_service.dart';
import 'claim_submission_screen.dart';
import '../models/claim.dart';

import 'package:flutter/foundation.dart' as foundation;
import 'package:intl/intl.dart';


class EUEligibleFlightsScreen extends StatefulWidget {
  const EUEligibleFlightsScreen({super.key});

  @override
  State<EUEligibleFlightsScreen> createState() => _EUEligibleFlightsScreenState();
}

class _EUEligibleFlightsScreenState extends State<EUEligibleFlightsScreen> {
  late Future<List<Map<String, dynamic>>> _flightsFuture;
  String _carrierFilter = '';
  static const int _hoursFilter = 72;

  @override
  void initState() {
    super.initState();
    _flightsFuture = _loadFlights();
  }

  Future<List<Map<String, dynamic>>> _loadFlights() async {
    foundation.debugPrint('Attempting to load EU compensation eligible flights for the last $_hoursFilter hours...');
            final service = AviationStackService(
              baseUrl: 'https://piotrs.pythonanywhere.com',
              usingPythonBackend: true,
              pythonBackendUrl: 'https://piotrs.pythonanywhere.com',
            );

    try {
      final flights = await service.getEUCompensationEligibleFlights(hours: _hoursFilter);
      foundation.debugPrint('Successfully loaded ${flights.length} eligible flights.');
      return flights;
    } catch (e) {
      foundation.debugPrint('Error loading flights in _loadFlights: $e');
      // Propagate the error to be handled by the FutureBuilder.
      throw Exception('Failed to load flight data: $e');
    }
  }

  void _refreshFlights() {
    setState(() {
      _flightsFuture = _loadFlights();
    });
  }

  int _calculateDelayMinutes(Map<String, dynamic> scheduled, Map<String, dynamic> actual) {
    try {
      final scheduledStr = scheduled['utc'] ?? scheduled['local'];
      final actualStr = actual['utc'] ?? actual['local'];
      
      if (scheduledStr != null && actualStr != null) {
        final scheduledTime = DateTime.parse(scheduledStr);
        final actualTime = DateTime.parse(actualStr);
        return actualTime.difference(scheduledTime).inMinutes;
      }
    } catch (e) {
      foundation.debugPrint('Error calculating delay: $e');
    }
    return 0;
  }
  
  void _openCompensationForm(BuildContext context, Map<String, dynamic> flight) {
    // Create an initial Claim object from the flight data
    final String departureTimeStr = flight['departure_scheduled_time']?.toString() ?? '';
    DateTime? departureDate;
    if (departureTimeStr.isNotEmpty) {
      try {
        departureDate = DateTime.parse(departureTimeStr);
      } catch (e) {
        foundation.debugPrint('Error parsing departure date: $e. Fallback to now.');
        departureDate = DateTime.now();
      }
    } else {
      departureDate = DateTime.now();
    }

    final initialClaim = Claim(
      id: '', // Will be generated by backend
      userId: '', // Will be added from auth service later
      airlineName: flight['airline_name']?.toString() ?? 'Unknown Airline',
      flightNumber: flight['flight_iata']?.toString() ?? '',
      departureAirport: flight['departure_airport_iata']?.toString() ?? '',
      arrivalAirport: flight['arrival_airport_iata']?.toString() ?? '',
      flightDate: departureDate,
      reason: '', // To be filled by user in the next steps
      compensationAmount: 0, // To be calculated
      status: 'Draft', // Initial status
      bookingReference: '', // To be filled by user
      attachmentUrls: [],
    );

    // Navigate to the new multi-step claim submission screen
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ClaimSubmissionScreen(initialClaim: initialClaim),
      ),
    );
  }

  String _getCompensationAmount(Map<String, dynamic> flight) {
    final int amount = _calculateCompensationAmount(flight);
    
    if (amount <= 0) {
      return 'Eligible (calculation needed)';
    }
    
    return '€$amount';
  }

  int _calculateCompensationAmount(Map<String, dynamic> flight) {
    try {
      if (flight.containsKey('potentialCompensationAmount') && 
          flight['potentialCompensationAmount'] is num && 
          flight['potentialCompensationAmount'] > 0) {
        return flight['potentialCompensationAmount'].toInt();
      }
      
      final distance = flight['distance'] as int? ?? _estimateFlightDistance(flight);
      
      if (distance <= 1500) {
        return 250; // Short flights up to 1500 km: €250
      } else if (distance <= 3500) {
        return 400; // Medium flights 1500-3500 km: €400
      } else {
        return 600; // Long flights over 3500 km: €600
      }
    } catch (e) {
      foundation.debugPrint('Error calculating compensation amount: $e');
      return 0;
    }
  }

  int _estimateFlightDistance(Map<String, dynamic> flight) {
    // Default distance categories for compensation calculation
    if (flight['isLongHaul'] == true) {
      return 4000; // Long-haul flight
    } else if (flight['isMediumHaul'] == true) {
      return 2500; // Medium-haul flight
    } else {
      return 1000; // Assume short-haul flight
    }
  }



  Widget _buildErrorWidget(BuildContext context, Object? error) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.cloud_off, size: 60, color: Colors.redAccent),
            const SizedBox(height: 16),
            Text(
              context.l10n.apiConnectionIssue,
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              error.toString(),
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              icon: const Icon(Icons.refresh),
              label: Text(context.l10n.retry),
              onPressed: _refreshFlights,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyStateWidget(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.flight_land, size: 80, color: Colors.grey),
            const SizedBox(height: 16),
            Text(
              context.l10n.noEligibleFlightsFound,
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: Colors.blueGrey[700],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 12),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Text(
                context.l10n.noEligibleFlightsDescription(_hoursFilter),
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              icon: const Icon(Icons.refresh),
              label: Text(context.l10n.checkAgain),
              onPressed: _refreshFlights,
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          context.l10n.euWideCompensationEligibleFlights,
          style: const TextStyle(fontSize: 18),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            tooltip: context.l10n.forceRefreshData,
            onPressed: () {
              // Show a snackbar to indicate refresh is happening
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(context.l10n.forcingFreshDataLoad)),
              );
              // Re-fetch flights using the primary load function
              setState(() {
                _flightsFuture = _loadFlights();
              });
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(
                      hintText: context.l10n.filterByAirline,
                      prefixIcon: const Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8.0),
                      ),
                      contentPadding: const EdgeInsets.symmetric(vertical: 0),
                    ),
                    onChanged: (value) {
                      setState(() {
                        _carrierFilter = value;
                      });
                    },
                  ),
                ),
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    color: Colors.grey[200],
                    borderRadius: BorderRadius.circular(24),
                  ),
                  child: Text(
                    context.l10n.lastHours(72),
                    style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey[700]),
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: FutureBuilder<List<Map<String, dynamic>>>(
              future: _flightsFuture,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const CircularProgressIndicator(),
                        const SizedBox(height: 20),
                        Text(
                          context.l10n.loadingExternalData,
                          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 8),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 32),
                          child: Text(
                            context.l10n.loadingExternalDataDescription,
                            style: TextStyle(color: Colors.grey[600]),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      ],
                    ),
                  );
                }

                if (snapshot.hasError) {
                  return _buildErrorWidget(context, snapshot.error);
                }

                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return _buildEmptyStateWidget(context);
                }

                final allFlights = snapshot.data!;
                
                // Apply filters
                final List<Map<String, dynamic>> filteredFlights = allFlights.where((flight) {
                  final airlineName = flight['airline_name']?.toString().toLowerCase() ?? '';
                  final passesCarrierFilter = _carrierFilter.isEmpty || airlineName.contains(_carrierFilter.toLowerCase());
                  return passesCarrierFilter;
                }).toList();

                if (filteredFlights.isEmpty) {
                  return Center(
                    child: Text(context.l10n.noFlightsMatchingFilter(_carrierFilter)),
                  );
                }

                return ListView.separated(
                  padding: EdgeInsets.zero,
                  itemCount: filteredFlights.length,
                  separatorBuilder: (context, index) => const Divider(height: 1),
                  itemBuilder: (context, idx) {
                    final flight = filteredFlights[idx];

                    final airlineName = flight['airline_name']?.toString() ?? 'Unknown';
                    final flightNumber = flight['flight_iata']?.toString() ?? '';
                    final aircraftModel = flight['aircraft_registration']?.toString() ?? 'Unknown';
                    final departureTimeStr = flight['departure_scheduled_time']?.toString();
                    final departureTime = (departureTimeStr?.isNotEmpty ?? false) ? 
                        DateTime.parse(departureTimeStr!) : null;
                    final delayMinutes = flight['delay_minutes'] ?? 0;
                    
                    // Determine compensation based on flight data
                    int compensationAmount = 0;
                    if (flight.containsKey('eligibility_details') && 
                        flight['eligibility_details'] != null && 
                        flight['eligibility_details']['estimatedCompensation'] != null) {
                      compensationAmount = flight['eligibility_details']['estimatedCompensation'];
                    } else {
                      // Fallback compensation calculation
                      final distance = flight['distance'] as int? ?? _estimateFlightDistance(flight);
                      if (distance <= 1500) {
                        compensationAmount = 250;
                      } else if (distance <= 3500) {
                        compensationAmount = 400;
                      } else {
                        compensationAmount = 600;
                      }
                    }

                    // Format title with flight number and airline
                    String titleText = flightNumber.isNotEmpty ? 
                        "$flightNumber - $airlineName" : airlineName;

                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4.0),
                      child: Column(
                        children: [
                          // Flight info section
                          Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                            child: Row(
                              children: [
                                // Airplane icon
                                Container(
                                  padding: const EdgeInsets.all(4),
                                  child: const Icon(Icons.flight, 
                                    size: 32, 
                                    color: Colors.blueGrey,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                // Flight details
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      // Flight number and airline
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                            titleText,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                            ),
                                          ),
                                          // EU Compensation tag
                                          Row(
                                            children: [
                                              const Icon(
                                                Icons.check_circle,
                                                color: Colors.green,
                                                size: 18,
                                              ),
                                              const SizedBox(width: 4),
                                              Text(
                                                context.l10n.euCompensation,
                                                style: TextStyle(
                                                  color: Colors.green[600],
                                                  fontSize: 14,
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 6),
                                      // Scheduled time
                                      Row(
                                        children: [
                                          const Icon(Icons.access_time, size: 14, color: Colors.black54),
                                          const SizedBox(width: 4),
                                          Text(
                                            "${context.l10n.scheduledLabel} ${departureTime != null ? DateFormat('E, MMM d, HH:mm').format(departureTime) : 'N/A'}",
                                            style: const TextStyle(fontSize: 14, color: Colors.black54),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 4),
                                      // Status with delay
                                      Row(
                                        children: [
                                          const Icon(Icons.info_outline, size: 14, color: Colors.black54),
                                          const SizedBox(width: 4),
                                          Text(
                                            "${context.l10n.statusLabel} ${context.l10n.flightStatusDelayed} - $delayMinutes ${context.l10n.minutes}",
                                            style: TextStyle(
                                              fontSize: 14, 
                                              color: delayMinutes >= 180 ? Colors.red : Colors.orange,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 4),
                                      // Compensation amount
                                      Row(
                                        children: [
                                          const Icon(Icons.euro, size: 14, color: Colors.green),
                                          const SizedBox(width: 4),
                                          Text(
                                            "${context.l10n.potentialCompensation} €$compensationAmount",
                                            style: TextStyle(
                                              fontSize: 14,
                                              color: Colors.green[700],
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 4),
                                      // Aircraft model
                                      Row(
                                        children: [
                                          const Icon(Icons.airplanemode_active, size: 14, color: Colors.black54),
                                          const SizedBox(width: 4),
                                          Text(
                                            "${context.l10n.aircraftLabel} $aircraftModel",
                                            style: const TextStyle(fontSize: 14, color: Colors.black54),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                          // Pre-fill button
                          Padding(
                            padding: const EdgeInsets.fromLTRB(16.0, 0, 16.0, 12.0),
                            child: SizedBox(
                              width: double.infinity,
                              child: ElevatedButton.icon(
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.green,
                                  foregroundColor: Colors.white,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(24),
                                  ),
                                  padding: const EdgeInsets.symmetric(vertical: 12),
                                ),
                                onPressed: () => _openCompensationForm(context, flight),
                                icon: const Icon(Icons.description, size: 16),
                                label: Text(
                                  context.l10n.prefillCompensationForm, 
                                  style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 14),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
