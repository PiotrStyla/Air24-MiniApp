// Mocks generated by Mockito 5.4.6 from annotations
// in f35_flight_compensation/test/widget/screens/claim_submission_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:f35_flight_compensation/core/accessibility/accessibility_service.dart'
    as _i7;
import 'package:f35_flight_compensation/services/aviation_stack_service.dart'
    as _i4;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeData_0 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AviationStackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAviationStackService extends _i1.Mock
    implements _i4.AviationStackService {
  MockAviationStackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#apiBaseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
      ) as String);

  @override
  _i6.Future<List<Map<String, dynamic>>> getRecentArrivals({
    required String? airportIcao,
    int? minutesBeforeNow = 360,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentArrivals,
          [],
          {
            #airportIcao: airportIcao,
            #minutesBeforeNow: minutesBeforeNow,
          },
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i6.Future<List<Map<String, dynamic>>>);

  @override
  _i6.Future<List<Map<String, dynamic>>> getEUCompensationEligibleFlights(
          {int? hours = 72}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEUCompensationEligibleFlights,
          [],
          {#hours: hours},
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i6.Future<List<Map<String, dynamic>>>);

  @override
  _i6.Future<Map<String, dynamic>> checkCompensationEligibility({
    required String? flightNumber,
    String? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkCompensationEligibility,
          [],
          {
            #flightNumber: flightNumber,
            #date: date,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  int min(
    int? a,
    int? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #min,
          [
            a,
            b,
          ],
        ),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [AccessibilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessibilityService extends _i1.Mock
    implements _i7.AccessibilityService {
  MockAccessibilityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get highContrastMode => (super.noSuchMethod(
        Invocation.getter(#highContrastMode),
        returnValue: false,
      ) as bool);

  @override
  bool get largeTextMode => (super.noSuchMethod(
        Invocation.getter(#largeTextMode),
        returnValue: false,
      ) as bool);

  @override
  bool get screenReaderEmphasis => (super.noSuchMethod(
        Invocation.getter(#screenReaderEmphasis),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> toggleHighContrastMode() => (super.noSuchMethod(
        Invocation.method(
          #toggleHighContrastMode,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> toggleLargeTextMode() => (super.noSuchMethod(
        Invocation.method(
          #toggleLargeTextMode,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> toggleScreenReaderEmphasis() => (super.noSuchMethod(
        Invocation.method(
          #toggleScreenReaderEmphasis,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i2.ThemeData getThemeData(_i2.ThemeData? baseTheme) => (super.noSuchMethod(
        Invocation.method(
          #getThemeData,
          [baseTheme],
        ),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.method(
            #getThemeData,
            [baseTheme],
          ),
        ),
      ) as _i2.ThemeData);

  @override
  double getTextScaleFactor() => (super.noSuchMethod(
        Invocation.method(
          #getTextScaleFactor,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  String semanticLabel(
    String? shortLabel,
    String? detailedLabel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #semanticLabel,
          [
            shortLabel,
            detailedLabel,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #semanticLabel,
            [
              shortLabel,
              detailedLabel,
            ],
          ),
        ),
      ) as String);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
